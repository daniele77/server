/*******************************************************************************
 * SERVER - A lightweight tcp/udp server framework.
 * Copyright (C) 2016 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include <iostream>
#include "server/server.h"

using namespace std;
using namespace server;

class MySession : public Session
{
public:
    MySession( boost::asio::ip::tcp::socket socket ) :
        Session( std::move( socket ) )
    {
    }
protected:
    void OnConnect() override {}
    void OnDisconnect() override {}
    void OnError() override {}
    void OnDataReceived( const std::string& data ) override {}
};

class MyServer : public Server
{
public:
    explicit MyServer( boost::asio::io_service& ios ) : Server( ios, 3000 ) {}
    std::shared_ptr< Session > CreateSession( boost::asio::ip::tcp::socket socket ) override
    {
        return std::make_shared< MySession >( std::move( socket ) );
    }
};

int main()
{
    auto f = [](){ std::cout << "Hello world!\n"; };
    f();

    boost::asio::io_service ios;
    MyServer s( ios );
    ios.run();

    return 0;
}
